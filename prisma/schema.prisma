generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


model Store {
  id              String    @id @default(uuid())
  name            String
  userId          String
  products        Product[]  @relation("StoreToProduct")
  brands          Brand[]  @relation("StoreToBrand")
  billboards      Billboard[] @relation("StoreToBillboard")
  categories      Category[]  @relation("StoreToCategory")
  sizes           Size[]      @relation("StoreToSize")
  colors          Color[]    @relation("StoreToColor")  
  orders          Order[]    @relation("StoreToOrder")
  reviews         Review[]    @relation("StoreToReview")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Billboard {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Category {
  id          String      @id @default(uuid())
  storeId     String
  products    Product[]   @relation("CategoryToProduct")
  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id          String      @id @default(uuid())
  storeId     String
  products    Product[]
  store       Store       @relation("StoreToSize", fields: [storeId], references: [id])
  name        String
  value       String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Color {
  id          String      @id @default(uuid())
  storeId     String
  products    Product[]
  store       Store       @relation("StoreToColor", fields: [storeId], references: [id])
  name        String
  value       String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}


model Product {
  id          String    @id @default(uuid())
  storeId     String   
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String   
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  description String    @db.VarChar(5000) 
  price       Decimal
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  brandId  String   
  brand    Brand  @relation(fields: [brandId], references: [id])
  sizeId      String   
  size        Size      @relation(fields: [sizeId], references: [id])
  colorId     String    
  color       Color     @relation(fields: [colorId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  images      Image[]
  orderItems  OrderItem[] 
  reviews     Review[]
  stockAmount Decimal?

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
  @@index([brandId])
}

model Review{
  id            String   @id @default(uuid())
  storeId       String   
  store         Store    @relation("StoreToReview", fields: [storeId], references: [id])
  userId        String
  user          User     @relation("UserToReview", fields: [userId], references: [id])
  productId     String   
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  description   String   @db.VarChar(5000)
  value         String

  @@index([storeId])
  @@index([userId])
  @@index([productId])
}
model Brand {
  id          String    @id @default(uuid())
  storeId     String   
  store       Store     @relation("StoreToBrand", fields: [storeId], references: [id]) 
  products    Product[]  
  name        String
  description String    @db.VarChar(5000) 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  images      Image[]

  @@index([storeId])
}


model Image {
  id          String   @id @default(uuid())
  productId   String   
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  brandId   String   
  brand     Brand  @relation(fields: [brandId], references: [id], onDelete: Cascade)
  url         String  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
  @@index([brandId])
}

model Order {
  id           String @id @default(uuid())
  storeId      String
  store        Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems   OrderItem[]
  isPaid       Boolean @default(false)
  phone        String @default("")
  address      String @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

   @@index([storeId])
}

model OrderItem {
  id          String @id @default(uuid())
  orderId     String
  order       Order @relation(fields: [orderId], references: [id])
  productId   String
  product     Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
model User {
  id          String    @id @default(uuid())
  email       String    @unique
  storeId      String
  hashedPassword    String
  name        String
  lastname    String
  age         String
  gender      String
  favorites   Favorite[]
  wishlist    Wishlist[]
  promocodes  UserPromocodes[]
  reviews     Review[]    @relation("UserToReview")
}

model Favorite{
  id  String    @id @default(uuid())
  productId  String @unique
  userId     String
  user       User @relation(fields:[userId],references:[id])

  @@index([userId])
}

model Wishlist{
  id  String    @id @default(uuid())
  productId  String @unique

  userId     String
  user       User @relation(fields:[userId],references:[id])

  @@index([userId])
}

model Promocodes {
  id                      String    @id @default(uuid())
  userAccessCode          String    @unique
  discountPercentAmount   String
  startDate               DateTime
  endDate                 DateTime
  storeId                 String
}

model UserPromocodes {
  id                      String    @id @default(uuid())
  userAccessCode          String 
  discountPercentAmount   String
  startDate               DateTime
  endDate                 DateTime
  storeId                 String
  userId String?
  user User? @relation(fields:[userId],references:[id])
  @@index([userId])
}
